@import 'settings/tools/utilities';
@import 'settings/variables';
@import 'settings/utilities';
@import 'settings/typography';

// set second color style
@each $color_name, $color_color in $colors {
  @each $color_type, $color_value in $color_color {
    @if ($color_type=="base") {
      .#{$color_name}--bg {
        &.color-border {
          @include border-color($color_value);
        }
        @include background-color($color_value);
      }
      .#{$color_name}--border {
        @include border-color($color_value);
      }
      .#{$color_name}--text {
        @include text-color($color_value);
      }
    }
    @else if ($color_type !="shades") {
      .#{$color_name}--bg.#{$color_type} {
        &.color-border {
          @include border-color($color_value);
        }
        @include background-color($color_value);
      }
      .#{$color_name}--border.border--#{$color_type} {
        @include border-color($color_value);
      }
      .#{$color_name}--text.text--#{$color_type} {
        @include text-color($color_value);
      }
    }
  }
}


@each $key, $utility in $utilities {
  // The utility can be disabled with `false`, thus check if the utility is a map first
  // Then check if the utility needs print styles
  //@debug $key, type-of($utility) == "map", type-of($utility), $utility
  @if type-of($utility) == "map" {
    @include generate-utility($utility, "");
  }
}

// Loop over each utility property
@each $spacingKey, $spacingItem in $spacings{
  // The utility can be disabled with `false`, thus check if the utility is a map first
  @if type_of(map-get($spacingItem, values)) == "map" {
    @each $valueKey, $value in map-get($spacingItem, values) {
      @if type_of(map-get($spacingItem, property)) == "string" {
        .#{map-get($spacingItem, class)}-#{$valueKey} {
          #{map-get($spacingItem, property)}: #{$value} !important;
        }
      }
      @else if type_of(map-get($spacingItem, property)) == "map" {
        .#{map-get($spacingItem, class)}-#{$valueKey} {
          content: #{map-get($spacingItem, class)}-#{$valueKey};
          @each $propertyKey, $propertyValue in map-get($spacingItem, property) {
            #{$propertyValue}: #{$value} !important;
          }
        }
      }
      @else if type_of(map-get($spacingItem, property)) == "list" {
        .#{map-get($spacingItem, class)}-#{$valueKey} {
          content: #{map-get($spacingItem, class)}-#{$valueKey};
          @each $propertyValue in map-get($spacingItem, property) {
            #{$propertyValue}: #{$value} !important;
          }
        }
      }
    }
  }
}